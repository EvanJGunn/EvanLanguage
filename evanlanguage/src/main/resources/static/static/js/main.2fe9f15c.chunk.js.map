{"version":3,"sources":["word_entry.js","title.js","test_portal.js","reportWebVitals.js","index.js"],"names":["WordEntry","props","state","language","meaning","romanization","type","mainSymbols","ancillarySymbols","source","successMessage","event","this","setState","target","value","postBody","symbolsBody","ancillary","symbols","sourceBody","wordSource","Axios","post","defaultProps","databaseSaveEndpoint","then","response","data","id","catch","error","message","retVal","handleSetMessage","onChange","handleChangeLanguage","bind","handleChangeRomanization","handleChangeMeaning","handleChangeType","handleChangeMain","handleChangeAncillary","handleChangeSource","onClick","handleSaveClick","React","Component","Title","TestPortal","testSource","testWordType","testLanguage","generationType","testQuestions","testState","questionIndex","questionFeedback","currentAnswer","correct","incorrect","wordType","databaseTestEndpoint","answer","myTestState","style","display","question","handleChangeAnswer","handleSubmitAnswer","handleNextQuestion","handleFinishTest","handleChangeWordType","handleChangeGenerationType","name","handleGenerateClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","wordEntry","title","testPortal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fe9f15c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\n/*\r\n  The word entry class is meant to\r\n  allow the user to enter a word into\r\n  the database via the webpage.\r\n*/\r\nclass WordEntry extends React.Component {\r\n  // Default properties of the class\r\n  static defaultProps = {\r\n    databaseSaveEndpoint: 'http://localhost:8080/save'\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      language: '',\r\n      meaning: '',\r\n      romanization: '',\r\n      type: '',\r\n      mainSymbols: '',\r\n      ancillarySymbols: '',\r\n      source: '',\r\n      successMessage: ''\r\n    };\r\n  }\r\n\r\n  // Handle setting the language\r\n  handleChangeLanguage(event) {\r\n    this.setState({language: event.target.value});\r\n  }\r\n\r\n  // Handle setting the meaning\r\n  handleChangeMeaning(event) {\r\n    this.setState({meaning: event.target.value});\r\n  }\r\n\r\n  // Handle setting the romanization\r\n  handleChangeRomanization(event) {\r\n    this.setState({romanization: event.target.value});\r\n  }\r\n\r\n  // Handle setting the type\r\n  handleChangeType(event) {\r\n    this.setState({type: event.target.value});\r\n  }\r\n\r\n  // Handle setting the main symbols\r\n  handleChangeMain(event) {\r\n    this.setState({mainSymbols: event.target.value});\r\n  }\r\n\r\n  // Handle setting the ancillary symbols\r\n  handleChangeAncillary(event) {\r\n    this.setState({ancillarySymbols: event.target.value});\r\n  }\r\n\r\n  // Handle setting the source\r\n  handleChangeSource(event) {\r\n    this.setState({source: event.target.value});\r\n  }\r\n\r\n  // Handle the attempt to save the data,\r\n  // post to the database.\r\n  async handleSaveClick() {\r\n    // If any of the necessary fields\r\n    // are undefined, return without\r\n    // attempting to push to the database.\r\n    if (this.state.language === '' ||\r\n        this.state.meaning === '' ||\r\n        this.state.romanization === '' ||\r\n        this.state.type === '') return;\r\n\r\n    // Create the JSON body of the post\r\n    let postBody = {\r\n      \"language\": this.state.language,\r\n      \"meaning\": this.state.meaning,\r\n      \"romanization\": this.state.romanization,\r\n      \"type\": this.state.type\r\n    };\r\n\r\n    // Create the json body of the symbols table\r\n    if (this.state.mainSymbols !== '') {\r\n      let symbolsBody = {\r\n        \"main\": this.state.mainSymbols\r\n      };\r\n      if (this.state.ancillarySymbols !== '') {\r\n        symbolsBody.ancillary = this.state.ancillarySymbols;\r\n      }\r\n      // Append to the word table post body\r\n      postBody.symbols = symbolsBody;\r\n    } else if (this.state.ancillarySymbols !== '') {\r\n      let symbolsBody = {\r\n        \"ancillary\": this.state.ancillarySymbols\r\n      };\r\n      postBody.symbols = symbolsBody;\r\n    }\r\n\r\n    // Create the json body of the source table\r\n    if (this.state.source !== '') {\r\n      let sourceBody = {\r\n        \"source\": this.state.source\r\n      };\r\n      postBody.wordSource = sourceBody;\r\n    }\r\n\r\n    // Post to the database\r\n    let retVal = await Axios.post(WordEntry.defaultProps.databaseSaveEndpoint, postBody).then(\r\n      function (response) {\r\n        return \"Created word with id: \" + response.data.id;\r\n      }\r\n    ).catch(\r\n      function (error) {\r\n        return error.message;\r\n      }\r\n    );\r\n\r\n    // Set the message shown to the user\r\n    this.handleSetMessage(retVal);\r\n\r\n    // Reset the fields the user will want to\r\n    // change for a new word, but leave Language\r\n    // and source unchanged, to prevent having\r\n    // to enter duplicate data for those fields.\r\n    this.setState({romanization: ''});\r\n    this.setState({meaning: ''});\r\n    this.setState({type: ''});\r\n    this.setState({mainSymbols: ''});\r\n    this.setState({ancillarySymbols: ''});\r\n  }\r\n\r\n  // Set the success message that\r\n  // tells the user if the database\r\n  // query succeeded\r\n  handleSetMessage(response) {\r\n    this.setState({successMessage: response});\r\n  }\r\n\r\n  /*\r\n  Render the input boxes\r\n  for inputting word data.\r\n  */\r\n  render() {\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <h1>\r\n                Word Insertion\r\n              </h1>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label>\r\n                Set Language:\r\n                <input type=\"text\" value={this.state.language} onChange={this.handleChangeLanguage.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Set Romanization:\r\n                <input type=\"text\" value={this.state.romanization} onChange={this.handleChangeRomanization.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Set Meaning:\r\n                <input type=\"text\" value={this.state.meaning} onChange={this.handleChangeMeaning.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Set Type:\r\n                <input type=\"text\" value={this.state.type} onChange={this.handleChangeType.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Set Main Symbols:\r\n                <input type=\"text\" value={this.state.mainSymbols} onChange={this.handleChangeMain.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Set Ancillary Symbols:\r\n                <input type=\"text\" value={this.state.ancillarySymbols} onChange={this.handleChangeAncillary.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Set Source:\r\n                <input type=\"text\" value={this.state.source} onChange={this.handleChangeSource.bind(this)} />\r\n              </label>\r\n              <br />\r\n              <button onClick = {this.handleSaveClick.bind(this)}>\r\n                Save\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <p>\r\n                {this.state.successMessage}\r\n              </p>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WordEntry;\r\n","import React from 'react';\r\n\r\nclass Title extends React.Component {\r\n  render() {\r\n    return (\r\n      <h1>\r\n        Evan Language Web: A Human Language Self-Testing Platform\r\n      </h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport Axios from 'axios';\r\n/*\r\n  The TestPortal class is a React\r\n  component that allows the user\r\n  to request a specific type of\r\n  test to be generated and served\r\n  by the server.\r\n*/\r\nclass TestPortal extends React.Component {\r\n  // Default properties of the class\r\n  static defaultProps = {\r\n    databaseTestEndpoint: 'http://localhost:8080/test'\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      testSource: '',\r\n      testWordType: '',\r\n      testLanguage: '',\r\n      generationType: 'MAIN_SYMBOLS',\r\n      testQuestions: {},\r\n      testState: 0,\r\n      questionIndex: 0,\r\n      questionFeedback: \"\",\r\n      currentAnswer: \"\",\r\n      correct: 0,\r\n      incorrect: 0\r\n    };\r\n  }\r\n\r\n  // Handle setting the language\r\n  handleChangeLanguage(event) {\r\n    this.setState({testLanguage: event.target.value});\r\n  }\r\n\r\n  // Handle setting the word type\r\n  handleChangeWordType(event) {\r\n    this.setState({testWordType: event.target.value});\r\n  }\r\n\r\n  // Handle setting the source\r\n  handleChangeSource(event) {\r\n    this.setState({testSource: event.target.value});\r\n  }\r\n\r\n  // Handle setting the test type\r\n  handleChangeGenerationType(event) {\r\n    this.setState({generationType: event.target.value});\r\n  }\r\n\r\n  /*\r\n    Query the server for a test\r\n    based on input criteria, when\r\n    the generate button is clicked.\r\n  */\r\n  async handleGenerateClick() {\r\n    // We do not need to test for\r\n    // must-set variables, as a test\r\n    // without variables will simply\r\n    // pull from all database entries.\r\n    // And generationType is set by default.\r\n\r\n    // We do however need to test if a variable\r\n    // is needed in the json.\r\n\r\n    let postBody = {\r\n      \"testType\": this.state.generationType\r\n    }\r\n\r\n    // Set the language of the test\r\n    if (this.state.testLanguage !== '') {\r\n      postBody.language = this.state.testLanguage;\r\n    }\r\n\r\n    // Set the word type of the test\r\n    if (this.state.testWordType !== '') {\r\n      postBody.wordType = this.state.testWordType;\r\n    }\r\n\r\n    // Set the source of the test\r\n    if (this.state.testSource !== '') {\r\n      postBody.source = this.state.testSource;\r\n    }\r\n\r\n    // console.log(postBody);\r\n\r\n    // Post to the database test endpoint\r\n    let retVal = await Axios.post(TestPortal.defaultProps.databaseTestEndpoint, postBody).then(\r\n      function (response) {\r\n        return response.data;\r\n      }\r\n    ).catch(\r\n      function (error) {\r\n        return error.message;\r\n      }\r\n    );\r\n\r\n    /*\r\n      If a set of questions is returned, checked by seeing\r\n      if the return json has a question property, then\r\n      set the state for the beginning of the test.\r\n    */\r\n    if (retVal[0]) {\r\n      this.setState({testQuestions: retVal});\r\n      this.setState({questionIndex: 0});\r\n      this.setState({correct: 0});\r\n      this.setState({incorrect: 0});\r\n      this.setState({questionFeedback: \"\"});\r\n      // testState determines what is rendered in the html,\r\n      // on 0 there is no test, so render the test generation\r\n      // html, on 1, we are in a question so render the question\r\n      // at the current question index, on 2 we have just finished\r\n      // a question so render question feedback, on state 3 we have\r\n      // finished the test, so tell the user their score, and then\r\n      // set the state back to 0 to render test generation\r\n      this.setState({testState: 1});\r\n    }\r\n\r\n    // TODO error handling, test failed to be generated\r\n  }\r\n\r\n  // Handle changing the state variable representing\r\n  // the answer to a question.\r\n  handleChangeAnswer(event) {\r\n    this.setState({currentAnswer: event.target.value});\r\n  }\r\n\r\n  // Handle an answer submission,\r\n  // check if the answer was correct,\r\n  // set user feedback variable accordingly,\r\n  // increment the correct or incorrect variable,\r\n  // set the test state to 2 so\r\n  // that the feedback html is rendered.\r\n  handleSubmitAnswer() {\r\n    // Correct case\r\n    if (this.state.currentAnswer ===\r\n      this.state.testQuestions[this.state.questionIndex].answer) {\r\n        this.setState({questionFeedback: \"Correct!\"});\r\n        this.setState({correct: this.state.correct+1});\r\n    }\r\n    // incorrect case\r\n    else {\r\n      this.setState({questionFeedback: \"Incorrect, the answer was: \" + this.state.testQuestions[this.state.questionIndex].answer});\r\n      this.setState({incorrect: this.state.incorrect+1});\r\n    }\r\n\r\n    // progress the state\r\n    this.setState({testState: 2});\r\n  }\r\n\r\n  // Check that there is a next question\r\n  // if not:\r\n  // set state to 3 so that the finished\r\n  // test html is rendered,\r\n  // if next question:\r\n  // increment the questionIndex to progress\r\n  // to the next question,\r\n  // set the state to 1.\r\n  handleNextQuestion() {\r\n    // Check if next question exists\r\n    if (this.state.testQuestions[this.state.questionIndex+1]) {\r\n      // Move the index forwards\r\n      this.setState({questionIndex: this.state.questionIndex+1});\r\n      // Move the state back to question state\r\n      this.setState({testState: 1});\r\n      // Reset the answer to an empty string\r\n      this.setState({currentAnswer: ''});\r\n    }\r\n    // End of test case\r\n    else {\r\n      // Progress to the last state, end of test\r\n      this.setState({testState: 3});\r\n    }\r\n  }\r\n\r\n  // Clean up variables, and reset to test generation html state.\r\n  handleFinishTest() {\r\n    this.setState({correct: 0});\r\n    this.setState({incorrect: 0});\r\n    this.setState({currentAnswer: ''});\r\n    this.setState({testState: 0});\r\n  }\r\n\r\n  render() {\r\n    // Setting values in html dynamically is potentially dangerous,\r\n    // however in this case I am not worried as it is for personal use,\r\n    // and the values do not affect my database.\r\n    var myTestState = this.state.testState;\r\n    return (\r\n      <table>\r\n        <tbody style={{ display: myTestState === 1 ? \"\" : \"none\"}}>\r\n          <tr>\r\n            <td>\r\n              <h2>\r\n                {this.state.testQuestions[this.state.questionIndex] ? this.state.testQuestions[this.state.questionIndex].question : \"\"}\r\n              </h2>\r\n              <label>\r\n                Answer:\r\n                <input type=\"text\" value={this.state.currentAnswer} onChange={this.handleChangeAnswer.bind(this)} />\r\n              </label>\r\n              <button onClick = {this.handleSubmitAnswer.bind(this)}>\r\n                Submit\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n\r\n        <tbody style={{ display: myTestState === 2 ? \"\" : \"none\"}}>\r\n          <tr>\r\n            <td>\r\n              <h2>\r\n                {this.state.questionFeedback}\r\n              </h2>\r\n              <button onClick = {this.handleNextQuestion.bind(this)}>\r\n                Next\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n\r\n        <tbody style={{ display: myTestState === 3 ? \"\" : \"none\"}}>\r\n          <tr>\r\n            <td>\r\n            <h2>\r\n              You got {this.state.correct} out of {this.state.correct+this.state.incorrect}.\r\n            </h2>\r\n            <button onClick = {this.handleFinishTest.bind(this)}>\r\n              End\r\n            </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n\r\n        <tbody style={{ display: myTestState === 0 ? \"\" : \"none\"}}>\r\n          <tr>\r\n            <td>\r\n              <h1>\r\n                Test Generation\r\n              </h1>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label>\r\n                Set Language:\r\n                <input type=\"text\" onChange={this.handleChangeLanguage.bind(this)} />\r\n              </label>\r\n              <br/>\r\n              <label>\r\n                Set Word Type (Noun...):\r\n                <input type=\"text\" onChange={this.handleChangeWordType.bind(this)} />\r\n              </label>\r\n              <br/>\r\n              <label>\r\n                Set Source:\r\n                <input type=\"text\" onChange={this.handleChangeSource.bind(this)} />\r\n              </label>\r\n              <br/>\r\n              <div onChange={this.handleChangeGenerationType.bind(this)}>\r\n                <p>\r\n                  Set Generation Type:\r\n                </p>\r\n                <input type=\"radio\" value=\"MAIN_SYMBOLS\" name=\"generation\" /> Main Symbols\r\n                <input type=\"radio\" value=\"MEANING\" name=\"generation\" /> Meaning\r\n              </div>\r\n              <br/>\r\n              <button onClick = {this.handleGenerateClick.bind(this)}>\r\n                Generate\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TestPortal;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WordEntry from './word_entry.js'\nimport Title from './title.js'\nimport TestPortal from './test_portal.js'\nimport reportWebVitals from './reportWebVitals';\n\nconst wordEntry = <WordEntry />;\nconst title = <Title />;\nconst testPortal = <TestPortal />;\n\nReactDOM.render(\n    title,\n    document.getElementById('Title'),\n);\n\nReactDOM.render(\n    wordEntry,\n    document.getElementById('WordEntry')\n);\n\nReactDOM.render(\n  testPortal,\n  document.getElementById('TestPortal')\n)\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}